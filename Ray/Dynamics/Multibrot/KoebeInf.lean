import Ray.Dynamics.Multibrot.BottcherInv
import Ray.Koebe.Koebe

/-!
# The Koebe quarter theorem at infinity, applied to dynamical and parameter space B√∂ttcher maps
-/

open Complex
open Function (uncurry)
open Filter (Tendsto)
open Metric (ball)
open RiemannSphere
open OneDimension
open Set
open scoped OneDimension OnePoint RiemannSphere Topology
noncomputable section

variable {c x z : ‚ÑÇ} {r : ‚Ñù}

-- We fix `d ‚â• 2`
variable {d : ‚Ñï} [Fact (2 ‚â§ d)]

/-!
### Koebe quarter theorem at infinity applied to `sbottcher_inv`
-/

/-- `sbottcher_inv` covers a large disk around the origin, by the Koebe quarter theorem -/
lemma sbottcher_inv_koebe (c16 : 16 < ‚Äñc‚Äñ) (rc : r ‚â§ ‚Äñc‚Äñ‚Åª¬π) :
    ball 0 (r / 4) ‚äÜ sbottcher_inv d c '' (ball 0 r) := by
  have c4 : 4 ‚â§ ‚Äñc‚Äñ := by linarith
  have k := koebe_quarter' (f := sbottcher_inv d c) (c := 0) (r := r) ?_ ?_
  ¬∑ simpa [(sbottcher_inv_monic c16).deriv] using k
  ¬∑ intro z zr
    refine (analyticAt_sbottcher_inv c4 ?_).along_snd
    simp only [Metric.mem_ball, dist_zero_right] at zr
    linarith
  ¬∑ exact (sbottcher_inv_inj c4).mono (Metric.ball_subset_ball rc)

/-- Large `c`, small `x` has small `sbottcher_inv` preimage -/
lemma sbottcher_inv_small_mem_preimage (c16 : 16 < ‚Äñc‚Äñ) (xc : ‚Äñx‚Äñ < ‚Äñc‚Äñ‚Åª¬π / 4) :
    ‚àÉ z : ‚ÑÇ, ‚Äñz‚Äñ < ‚Äñc‚Äñ‚Åª¬π ‚àß ‚Äñz‚Äñ ‚â§ 4 * ‚Äñx‚Äñ ‚àß (c, (z : ùïä)‚Åª¬π) ‚àà (superF d).post ‚àß
      sbottcher_inv d c z = x := by
  set s := superF d
  by_cases x0 : x = 0
  ¬∑ refine ‚ü®0, ?_, ?_, ?_, ?_‚ü©
    ¬∑ simp only [norm_zero]
      bound
    ¬∑ bound
    ¬∑ simp only [coe_zero, inv_zero', s.post_a]
    ¬∑ simp only [sbottcher_inv_zero, x0]
  ¬∑ obtain ‚ü®t, t0, t1‚ü© := exists_between xc
    have tc : 4 * t ‚â§ ‚Äñc‚Äñ‚Åª¬π := by linarith
    obtain ‚ü®z,zm,zx‚ü© := sbottcher_inv_koebe (d := d) c16 tc (a := x) (by simp; linarith)
    simp only [Metric.mem_ball, dist_zero_right] at zm
    have zc : ‚Äñz‚Äñ < ‚Äñc‚Äñ‚Åª¬π := by linarith
    refine ‚ü®z, (by linarith), ?_, ?_, zx‚ü©
    ¬∑ refine le_of_forall_pos_le_add fun e e0 ‚Ü¶ ?_
      have small : x ‚àà ball 0 (min (4 * ‚Äñx‚Äñ + e) ‚Äñc‚Äñ‚Åª¬π / 4) := by
        simp only [Metric.mem_ball, dist_zero_right, lt_min_iff,
          ‚Üê min_div_div_right (by norm_num : (0 : ‚Ñù) ‚â§ 4)]
        constructor <;> linarith
      obtain ‚ü®z',zm',zx'‚ü© := sbottcher_inv_koebe (d := d) c16 (r := min (4 * ‚Äñx‚Äñ + e) ‚Äñc‚Äñ‚Åª¬π)
        (by exact min_le_right _ _) (a := x) small
      simp only [Metric.mem_ball, dist_zero_right, lt_inf_iff] at zm'
      have e := zx.trans zx'.symm
      rw [(sbottcher_inv_inj (by linarith)).eq_iff (by simpa) (by simp [zm'])] at e
      exact e ‚ñ∏ zm'.1.le
    ¬∑ exact postcritical_small (by linarith) (by linarith)

/-- Large `c`, small `x` is in `s.ext` -/
lemma small_mem_ext (c16 : 16 < ‚Äñc‚Äñ) (xc : ‚Äñx‚Äñ < ‚Äñc‚Äñ‚Åª¬π / 4) : (c, x) ‚àà (superF d).ext := by
  obtain ‚ü®z,_,_,zp,zx‚ü© := sbottcher_inv_small_mem_preimage (d := d) c16 xc
  exact zx ‚ñ∏ ((superF d).homeomorphSlice c).map_target zp

/-!
### Koebe quarter theorem at infinity applied to `bottcher`
-/

/-- `bottcher` covers a large disk around the origin, by the Koebe quarter theorem -/
lemma bottcher_inv_koebe (r2 : r ‚â§ 2‚Åª¬π) :
    ball 0 (r / 4) ‚äÜ bottcher_inv d '' (ball 0 r) := by
  have k := koebe_quarter' (f := bottcher_inv d) (c := 0) (r := r) ?_ ?_
  ¬∑ simpa [bottcher_hasDerivAt_one.deriv] using k
  ¬∑ intro z zr
    simp only [Metric.mem_ball, dist_zero_right] at zr
    exact analyticAt_bottcher_inv (by linarith)
  ¬∑ exact bottcher_inv_inj.mono (Metric.ball_subset_ball r2)

/-- Small `z`s have small `bottcher_inv` preimages -/
lemma bottcher_inv_small_mem_preimage (z2 : ‚Äñz‚Äñ < 8‚Åª¬π) :
    ‚àÉ c : ‚ÑÇ, ‚Äñc‚Äñ ‚â§ 4 * ‚Äñz‚Äñ ‚àß (c : ùïä)‚Åª¬π ‚àà multibrotExt d ‚àß bottcher_inv d c = z := by
  set s := superF d
  by_cases z0 : z = 0
  ¬∑ refine ‚ü®0, ?_, ?_, ?_‚ü©
    ¬∑ simp only [norm_zero]
      bound
    ¬∑ simp only [coe_zero, inv_zero', multibrotExt_inf]
    ¬∑ simp only [bottcher_inv_zero, z0]
  ¬∑ obtain ‚ü®t, t0, t1‚ü© := exists_between z2
    obtain ‚ü®c,cm,cx‚ü© := bottcher_inv_koebe (d := d) (r := 4 * t) (by linarith) (a := z)
      (by simp; linarith)
    have c2 : ‚Äñc‚Äñ < 2‚Åª¬π := by
      simp only [Metric.mem_ball, dist_zero_right] at cm
      linarith
    have cz : ‚Äñc‚Äñ ‚â§ 4 * ‚Äñz‚Äñ := by
      refine le_of_forall_pos_le_add fun e e0 ‚Ü¶ ?_
      have small : z ‚àà ball 0 (min (4 * ‚Äñz‚Äñ + e) 2‚Åª¬π / 4) := by
        simp only [Metric.mem_ball, dist_zero_right, lt_min_iff,
          ‚Üê min_div_div_right (by norm_num : (0 : ‚Ñù) ‚â§ 4)]
        constructor <;> linarith
      obtain ‚ü®c',cm',cx'‚ü© := bottcher_inv_koebe (d := d) (r := min (4 * ‚Äñz‚Äñ + e) 2‚Åª¬π)
        (min_le_right _ _) (a := z) small
      simp only [Metric.mem_ball, dist_zero_right, lt_inf_iff] at cm'
      have e := cx.trans cx'.symm
      rw [bottcher_inv_inj.eq_iff (by simpa) (by simp [cm'])] at e
      exact e ‚ñ∏ cm'.1.le
    exact ‚ü®c, cz, inv_mem_multibrotExt c2, cx‚ü©
